subprojects {

    apply plugin: 'java'

    sourceCompatibility = '1.7'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "0.1.0-SNAPSHOT"
    status              = "integration"
    description         = "connector prooviders to jersey client"
    ext.url             = "http://puniverse.github.com/jersey-connectors"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName1    = "CDDL+GPL License"
    ext.licenseUrl1     = "http://glassfish.java.net/public/CDDL+GPL_1_1.html"
    ext.scmUrl          = "https://github.com/puniverse/jersey-connectors"
    ext.scmConnection   = "https://github.com/puniverse/jersey-connectors.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        sonatypeUsername = ""
        sonatypePassword = ""
    }
    if (!project.hasProperty('mainClass')) { // must use project.hasProperty() rather than hasProperty in subprojects (gradle bug)
        ext.mainClass = ''
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }

    dependencies {
        compile ('org.glassfish.jersey.core:jersey-client:2.4') {
            exclude group: 'org.glassfish.hk2.external', module: 'asm-all-repackaged' 
            exclude group: 'org.glassfish.hk2.external', module: 'cglib' 
        }
        compile 'org.sonatype.sisu.inject:cglib:3.0'
    }
    
    defaultTasks 'jar'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    javadoc {
        //        classpath = configurations.compile
        options.links 'http://docs.oracle.com/javaee/7/api/'
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    } 

    task wrapper(type: Wrapper) {
        gradleVersion = '1.6'
    }
    ///////// Publish Artifacts 
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(
                    url: (isReleaseVersion ? 
	                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" : 
	                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                    // User and Password are taken from ~/.gradle/gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } 
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    } 
                    licenses {
                        license {
                            name project.licenseName1
                            url project.licenseUrl1
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'eitan'
                            name 'Eitan Yarden'
                        }
                    }
                }
            }
        }
    }	

    // Adds license header on each java file. gradle licenseMain for check or licenseFormatMain to apply
    apply plugin: 'license'
    license {
        header rootProject.file('LICENSE')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        skipExistingHeaders true
        mapping('java','SLASHSTAR_STYLE')
    }
   
}

// needed to the license plugin
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.5.0'
    }
}    

project (':netty-connector') {
    dependencies {
        compile 'com.ning:async-http-client:1.7.19'
    }
}

project (':jetty-connector') {
    dependencies {
        compile 'org.eclipse.jetty:jetty-client:9.1.0.RC0'
    }    
}
